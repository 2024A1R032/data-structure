#include<stdio.h>//10 march
#include<stdlib.h>
#define SIZE 5
int queue[SIZE],front=-1,rear=-1;
int isempty(){
    return (front==-1) ? 1:0;
}
int isfull(){
    return((rear+1)% SIZE ==front) ? 1: 0;
}
void enqueue(int data){
    rear=(rear+1) % SIZE;//5=6
    queue[rear]=data;
    if(front==-1)
    front=0;
    printf("element inserted !!!!\n");
}
int dequeue(){
    int data=queue[front];
    if(front==rear)
    front=rear=-1;
    else
    front=(front+1)% SIZE;
    return data;
}
int peek(){
    return queue[front];
}
void display(){
   printf("circular queue elements are:\n");
   int i=front;
   while(i!=rear){
    printf("%d",queue[i]);
    i=(i+1) % SIZE;
   } 
}
int main(){
    while(1){
        printf("_____circular queue_____\n");
        printf("1.enqueue\n");
        printf("2.dequeue\n");
        printf("3. display\n");
        printf("5.exit\n");
        int choice,data;
        printf("enter choice= ");
        scanf("%d",&choice);
        switch(choice){
            case 1:
            if(isfull())
            printf("queue overflow !!!!\n");
            else{
                printf("enter element: ");
                scanf("%d",&data);
                enqueue(data);
            }
            break;
            case 2:
            if(isempty())
            printf("queue underflow !!!\n");
            else
            printf("%d is dequeue from the queue\n",dequeue());
            break;
            case 3:
            if(isempty())
            printf("queue is empty !!!\n");
            else
            printf("element available in the front of the queue is %d\n",peek());
            break;
            case 4:
            if(isempty())
            printf("queue is empty !!!\n");
            else
            display();
            break;
            case 5:
            exit(0);
            default:
            printf("invalid choice !!!!\n");
        }
    }
}
