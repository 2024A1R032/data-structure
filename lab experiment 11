#include <stdio.h>
#include <stdlib.h>

struct Node
{
    int data;
    struct Node *next;
};

struct Node *rear = NULL;
struct Node *front = NULL;

void enqueue(int value)
{
    struct Node *temp = (struct Node *)malloc(sizeof(struct Node));

    if (temp == NULL)
        printf("QUEUE OVERFLOWW!!!\n");
    else
    {
        temp->data = value;
        temp->next = NULL;
        if (rear == NULL)
            front = rear = temp;
        else
            rear->next = temp;
        printf("%d is enqueued!!\n", value);
    }
}

int dequeue()
{
    if (front == NULL)
    {
        printf("Queue Underflow !!\n");
        return -1;
    }
    else
    {
        struct Node *temp = front;
        front = front->next;
        if (front == NULL)
            rear = NULL;
        int val = temp->data;
        free(temp);
        return val;
    }
}

int peek()
{
    if (front == NULL)
    {
        printf("Queue is empty !!\n");
        return -1;
    }
    else
        return front->data;
}

void display(){
    if(front == NULL)
        printf("QUEUE IS EMPTY!!!\n");
    else{
        printf("Queue elements are: \n");
        struct Node* temp = front;
        while(temp != NULL){
            printf("%d\n", temp->data);
            temp = temp->next;
        }
    }
}

int main()
{

    while (1)
    {
        printf("1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Peek\n");
        printf("4. Display\n");
        printf("5. Exit\n");

        int choice, data;

        printf("Enter a choice: ");
        scanf("%d", &choice);

        switch (choice)
        {
        case 1:
            printf("Enter value to queue: ");
            scanf("%d", &data);
            enqueue(data);
            break;
        case 2:
            dequeue();
            break;
        case 3:
            peek();
            break;
        case 4:
            display();
            break;
        default:
            printf("Enter a valid choice\n");
        }
        printf("\n");
    }

    return 0;
}
