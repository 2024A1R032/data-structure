#include<stdio.h>//11 exp date:16-4-25
#include<stdlib.h>
struct Node{
    int data;
    struct Node*next;
};
struct Node*front=NULL;
struct Node*rear=NULL;
void enqueue(int value){
    struct Node*temp=(struct Node*)malloc(sizeof(struct Node));
    if(temp==NULL)
    printf("queue overflow !!!\n");
    else{
        temp->data=value;
        temp->next=NULL;
        if(rear==NULL)
            front=rear=temp;
            else
            rear->next=temp;
            printf("%d inserted in queue");
        }
    }
    int dequeue(){
        if(front==NULL){
            printf("queue undeflow!!!\n");
            return -1;
        }
        else{
            struct Node*temp=front;
            front=front->next;
            if(front ==NULL)
            rear=NULL;
            int val=temp->data;
            free(temp);
            return val;
        }
    }
    int peek(){
        if(front==NULL){
            printf("queue is empty !!!\n");
            return -1;
        }
        else
        return front->data;
    }
    void display() {
        if (isempty()) {
            printf("Queue is empty !!!\n");
            return;
        }
    
        struct Node* temp = front;
        printf("Queue elements are:\n");
        while (temp != NULL) {
            printf("%d ", temp->data);
            temp = temp->next;
        }
        printf("\n");
    }
int main(){
    while(1){
        printf("1. push\n");
        printf("2. pop\n");
        printf("3. peek\n");
        printf("4.display\n");
        printf("5. exit\n");
        int choice,val,res;
        printf("enter choice: ");
        scanf("%d",&choice);
        switch(choice){
            case 1:
            printf("enter value");
            scanf("%d",&val);
            push(val);
            break;
            case 2:
            res=pop();
            if(res !=-1)
            printf("%d pop from the stack\n",res);
            break;
            case 3:
            res=pop();
            if(res !=-1)
            printf("%d peek from the stack\n",res);
            break;
            case 4:
            show();
            break;
            case 5:
            exit(0);
            default:
            printf("invalid choice !!!!\n");
        }
    }
}
